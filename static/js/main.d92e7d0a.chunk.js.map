{"version":3,"sources":["services/hnApi.js","styles/StoryStyles.js","components/story.js","mappers/mapTime.js","styles/StoryContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","serviceWorker.js","index.js","App.js"],"names":["baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","url","data-testid","href","title","timestamp","seconds","Math","floor","Date","interval","mapTime","time","GlobalStyle","createGlobalStyle","StoryContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","StoryIds","setStoryIds","ids","data-test-id","slice","map","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gOAGaA,EAAO,yCACPC,EAAa,UAAMD,EAAN,mBACbE,EAAQ,UAAMF,EAAN,SAERG,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACHC,IAAMC,IAAN,UAAaL,EAAWE,EAAxB,UAAwCI,MAAK,qBAAEC,QAD5C,cAClBC,EADkB,yBAGjBA,GAHiB,2CAAH,sDAORC,EAAW,uCAAG,4BAAAN,EAAA,sEACFC,IAAMC,IAAIN,GAAeO,MAAK,qBAAEC,QAD9B,cACjBC,EADiB,yBAGhBA,GAHgB,2CAAH,qD,m7BCZjB,IAAME,EAAeC,IAAOC,QAAV,KAuBZC,EAAaF,IAAOG,GAAV,KAkBVC,EAAYJ,IAAOK,IAAV,KAqBTC,EAAmBN,IAAOO,KAAV,KAGpB,SAAAC,GAAK,OAAIA,EAAMC,OAAS,SC7DpBC,EAAQ,SAAC,GAAe,IAAdnB,EAAa,EAAbA,QAAa,EAENoB,mBAAS,IAFH,mBAEzBC,EAFyB,KAElBC,EAFkB,KAQhC,OAHAC,qBAAU,WACNxB,EAASC,GAASI,MAAK,SAAAC,GAAI,OAAIA,GAAQA,EAAKmB,KAAOF,EAASjB,QAC7D,IACIgB,GAASA,EAAMG,IAGlB,kBAAChB,EAAD,CAAciB,cAAY,SAC1B,kBAACd,EAAD,KAEI,uBAAGe,KAAML,EAAMG,KAAf,IAAsBH,EAAMM,QAIhC,kBAACd,EAAD,KACI,8BACA,kBAACE,EAAD,CAAkBG,MAAM,WAAxB,UADA,IAC6D,IAD7D,IACmEG,EAAMG,MAK7E,kBAACX,EAAD,KACI,8BACA,kBAACE,EAAD,CAAkBG,MAAM,WAAxB,aADA,QChCW,SAAAU,GACnB,IAAMC,EAAUC,KAAKC,OAAO,IAAIC,KAAmB,IAAZJ,GAAoB,KAEvDK,EAAWH,KAAKC,MAAMF,EAAU,SAEpC,OAAGI,EAAW,EACJ,GAAN,OAAUA,EAAV,eAEJA,EAAWH,KAAKC,MAAMF,EAAU,SAElB,EACJ,GAAN,OAAUI,EAAV,gBAEJA,EAAWH,KAAKC,MAAMF,EAAU,SAElB,EACJ,GAAN,OAAUI,EAAV,cAEJA,EAAWH,KAAKC,MAAMF,EAAU,OAElB,EACJ,GAAN,OAAUI,EAAV,eAEJA,EAAWH,KAAKC,MAAMF,EAAU,KAClB,EACJ,GAAN,OAAUI,EAAV,gBAGE,IAAN,OAAWH,KAAKC,MAAMF,GAAtB,gBDMSK,CAAQb,EAAMc,SAMnB,M,0sBEtCD,IAAMC,EAAcC,YAAH,KA2BXC,EAAwB7B,IAAO8B,KAAV,KCzBrBC,EAAoB,WAAO,IAAD,EACLpB,oBAAS,GADJ,mBAC5BqB,EAD4B,KACnBC,EADmB,OAETtB,mBCLC,IDGQ,mBAE5BuB,EAF4B,KAErBC,EAFqB,KAI7BC,EERc,SAACC,EAAMC,EAAMC,EAAWC,GAE5C,IAAIC,EAEJ,OAAO,WACH,IACMC,EAAUH,IAAcE,EAO9BE,aAAaF,GACbA,EAAUG,YANI,WACVH,EAAU,KACLF,GAAWF,EAAKQ,W,EAAeL,KAIZF,GAEzBI,GAASL,EAAKQ,W,EAAeL,IFRfM,EAAS,WAE1B,GAAGC,OAAOC,YAAcC,SAASC,gBAAgBC,YAAcF,SAASC,gBAAgBE,cAAgBpB,EACpG,OAAO,EAEXC,GAAW,KAGZ,KAoBJ,OAlBCnB,qBAAU,WACFkB,IAGJG,EADGD,ECpBoB,IADJ,QDwBNA,ECvBU,ID0BvBD,GAAW,MACZ,CAACD,IAEJlB,qBAAU,WAGN,OADAiC,OAAOM,iBAAiB,SAAUjB,GAC3B,kBAAMW,OAAOO,oBAAoB,SAAUlB,MACnD,IAEE,CAACF,UG7BGqB,EAAmB,WAAO,IAAD,EAEF5C,mBAAS,IAFP,mBAE3B6C,EAF2B,KAEjBC,EAFiB,KAG1BvB,EAAUH,IAAVG,MASR,OAPApB,qBAAU,WACRhB,IAAcH,MAAK,SAAA+D,GAAG,OAAID,EAAYC,QACrC,IAOC,oCACJ,kBAAC/B,EAAD,MACA,kBAACE,EAAD,CAAuB8B,eAAa,mBACpC,2CACCH,EAASI,MAAM,EAAG1B,GAAO2B,KAAI,SAAAtE,GAAO,OAI7B,kBAAC,EAAD,CAAOuE,IAAKvE,EAASA,QAAWA,UCjBtCwE,EAAcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT1E,MAAK,SAAA+E,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,iBAAO,mBCDY,kBAAM,kBAAC,EAAD,QDClB,MAAStC,SAASuC,eAAe,SDiBjC,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,cAAwB3C,OAAOkB,SAAShD,MACpD0E,SAAW5C,OAAOkB,SAAS0B,OAIvC,OAGF5C,OAAOM,iBAAiB,QAAQ,WAC9B,IAAMgB,EAAK,UAAMqB,cAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BlG,MAAK,SAAAmG,GAEJ,IAAMC,EAAcD,EAASD,QAAQnG,IAAI,gBAEnB,MAApBoG,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMvG,MAAK,SAAA+E,GACjCA,EAAayB,aAAaxG,MAAK,WAC7BoD,OAAOkB,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAmB,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMvG,MAAK,WACjCsF,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.d92e7d0a.chunk.js","sourcesContent":["import axios from 'axios';\nimport {selectFields} from '../selectors/selectFields'\n\nexport const baseUrl = `https://hacker-news.firebaseio.com/v0/`;\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`\n\nexport const getStory = async (storyId) => {\nconst result = await axios.get(`${storyUrl + storyId}.json`).then(({data}) => data)\n\nreturn result;\n\n}\n\nexport const getStoryIds = async () => {\n    const result = await axios.get(newStoriesUrl).then(({data}) => data);\n\n    return result;\n}","import styled from 'styled-components';\n\nexport const StoryWrapper = styled.section`\n\npadding-top: 10px;\nmargin-bottom: 20px;\nborder-top: 1px solid #6d6e6e;\n\n&:first-of-type {\n    border-top: 0;\n}\n\n&:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n}\n\n.StoryWrapper {\n    transition: opacity 0.5s;\n    opacity: 1;\n}\n\n\n`;\n\nexport const StoryTitle = styled.h1`\n\nmargin-bottom: 5px;\nfont-size: 18px;\nline-hight: 1.8;\nmargin: 0;\ntext-decoration: none;\n\na {\n    color: #2bc4c4;\n    text-decoration: none;\n}\n\n\n\n\n`;\n\nexport const StoryMeta = styled.div`\n\nfont-style: italic;\ncolor: #979999;\n\n\n\n\n> span:not(:first-child):before {\n    content: 'â€¢';\n    margin: 0 7px;\n}\n\n.story__meta-bold {\n    font-weight: bold;\n}\n\n\n\n`;\n\nexport const StoryMetaElement = styled.span`\n\nfont-weight: bold;\ncolor: ${props => props.color || 'red'};\n\n`;","import React, {useState, useEffect} from 'react';\nimport {getStory} from '../services/hnApi'\nimport {StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement} from '../styles/StoryStyles'\nimport {mapTime} from '../mappers/mapTime'\n\n\nexport const Story = ({storyId}) => {\n\n    const [story, setStory] = useState({});\n\n\n    useEffect(() => {\n        getStory(storyId).then(data => data && data.url && setStory(data));\n    }, []);\n    return story && story.url ? (\n\n        \n        <StoryWrapper data-testid=\"story\">\n        <StoryTitle>\n\n            <a href={story.url}> {story.title}</a> \n        </StoryTitle>\n\n\n        <StoryMeta>\n            <span> \n            <StoryMetaElement color=\"#adadad\">Url:  </StoryMetaElement> {' '} {story.url}\n            </span>\n            \n        </StoryMeta>\n\n        <StoryMeta>\n            <span>\n            <StoryMetaElement color=\"#adadad\">Posted:  </StoryMetaElement> {` `} \n            {mapTime(story.time)}\n             </span>\n            \n        </StoryMeta>\n        </StoryWrapper>\n        \n    ) : null ;\n}","export const mapTime = timestamp => {\n    const seconds = Math.floor((new Date - timestamp * 1000) / 1000);\n\n    let interval = Math.floor(seconds / 31536000);\n\n    if(interval > 1) {\n        return `${interval} years ago`;\n    }\n    interval = Math.floor(seconds / 2592000);\n\n    if(interval > 1) {\n        return `${interval} months ago`;\n    }\n    interval = Math.floor(seconds / 864400);\n\n    if(interval > 1) {\n        return `${interval} days ago`;\n    }\n    interval = Math.floor(seconds / 3600);\n\n    if(interval > 1) {\n        return `${interval} hours ago`;\n    }\n    interval = Math.floor(seconds / 60);\n    if(interval > 1) {\n        return `${interval} minutes ago`;\n    }\n    \n    return ` ${Math.floor(seconds)} seconds ago`\n\n}","import styled, { createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle `\n\n    html {\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box;\n    }\n    *, *:before, *:after {\n        -webkit-box-sizing: inherit;\n                box-sizing: inherit;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n        line-height: 1;\n        color: #2bc4c4;\n        background-color: #373838;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 16px;\n    }\n\n    ul {\n        margin: 0;\n        padding: 0;\n    }\n\n`\nexport const StoryContainerWrapper = styled.main `\n\n    max-width: 1140px;\n    padding: 20px 15;\n    margin: auto;\n\n`;","import { useState, useEffect } from \"react\";\nimport {STORY_INCREMENT, MAX_STORIES} from '../constants/index';\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n    const [loading, setLoading] = useState(false);\n    const [count, setCount] = useState(STORY_INCREMENT);\n\n    const handleScroll = debounce(() => {\n        \n        if(window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n            return false;\n        }\n        setLoading(true);\n\n\n    }, 500);\n\n    useEffect(() => {\n        if(!loading) return;\n\n        if(count + STORY_INCREMENT >= MAX_STORIES) {\n        setCount(MAX_STORIES);\n        } else {\n            setCount(count + STORY_INCREMENT);\n        }\n\n        setLoading(false);\n    }, [loading]);\n\n    useEffect(() => {\n\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, []);\n\n   return{count};\n\n}","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;","export const debounce = (func, wait, immediate, args) => {\n\n    let timeout;\n\n    return () => {\n        const context = this;\n        const callNow = immediate && !timeout;\n\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n\n        if(callNow) func.apply(context, args);\n    }\n}","import React, {useEffect, useState} from 'react';\nimport {getStoryIds, getStory} from '../services/hnApi';\nimport { Story } from '../components/story';\nimport { GlobalStyle, StoryContainerWrapper } from \"../styles/StoryContainerStyles\";\nimport {useInfiniteScroll} from '../hooks/useInfiniteScroll';\n\n\nexport const StoriesContainer = () => {\n\n    const [StoryIds, setStoryIds] = useState([]);\n    const { count } = useInfiniteScroll();\n  \n    useEffect(() => {\n      getStoryIds().then(ids => setStoryIds(ids));\n    }, [\n    ]);\n\n   \n  \n    return (\n    \n        <>\n    <GlobalStyle /> \n    <StoryContainerWrapper data-test-id=\"story-conatiner\"> \n    <h1>Hacker News</h1>\n    {StoryIds.slice(0, count).map(storyId => (\n        \n       \n\n            <Story key={storyId} storyId = {storyId} />\n            \n            ))}\n        \n        \n        \n    </StoryContainerWrapper>\n    \n  </>);\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n","import React from 'react';\nimport { StoriesContainer } from './containers/StoriesContainer';\n\n\nexport const App = () => <StoriesContainer></StoriesContainer>;"],"sourceRoot":""}