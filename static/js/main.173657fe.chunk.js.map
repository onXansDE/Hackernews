{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/story.js","mappers/mapTime.js","styles/StoryContainerStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/StoriesContainer.js","index.js","App.js"],"names":["selectFields","id","by","url","time","title","baseUrl","newStoriesUrl","storyUrl","getStory","storyId","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","useState","story","setStory","useEffect","data-testid","href","timestamp","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoryContainerWrapper","main","useInfiniteScroll","loading","setLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","StoriesContainer","StoryIds","setStoryIds","ids","data-test-id","slice","map","key","render","getElementById"],"mappings":"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","file":"static/js/main.173657fe.chunk.js","sourcesContent":["\nexport const selectFields = ({id, by, url, time, title} = {} ) => ({id, by, url, time, title})","import axios from 'axios';\nimport {selectFields} from '../selectors/selectFields'\n\nexport const baseUrl = `https://hacker-news.firebaseio.com/v0/`;\nexport const newStoriesUrl = `${baseUrl}newstories.json`;\nexport const storyUrl = `${baseUrl}item/`\n\nexport const getStory = async (storyId) => {\nconst result = await axios.get(`${storyUrl + storyId}.json`).then(({data}) => data && selectFields(data));\n\nreturn result;\n\n}\n\nexport const getStoryIds = async () => {\n    const result = await axios.get(newStoriesUrl).then(({data}) => data);\n\n    return result;\n}","import styled from 'styled-components';\n\nexport const StoryWrapper = styled.section`\n\npadding-top: 10px;\nmargin-bottom: 20px;\nborder-top: 1px solid #6d6e6e;\n\n&:first-of-type {\n    border-top: 0;\n}\n\n&:last-of-type {\n    margin-bottom: 0;\n    padding-bottom: 0;\n}\n\n.StoryWrapper {\n    transition: opacity 0.5s;\n    opacity: 1;\n}\n\n\n`;\n\nexport const StoryTitle = styled.h1`\n\nmargin-bottom: 5px;\nfont-size: 18px;\nline-hight: 1.8;\nmargin: 0;\ntext-decoration: none;\n\na {\n    color: #2bc4c4;\n    text-decoration: none;\n}\n\n\n\n\n`;\n\nexport const StoryMeta = styled.div`\n\nfont-style: italic;\ncolor: #979999;\n\n\n\n\n> span:not(:first-child):before {\n    content: 'â€¢';\n    margin: 0 7px;\n}\n\n.story__meta-bold {\n    font-weight: bold;\n}\n\n\n\n`;\n\nexport const StoryMetaElement = styled.span`\n\nfont-weight: bold;\ncolor: ${props => props.color || 'red'};\n\n`;","import React, {useState, useEffect} from 'react';\nimport {getStory} from '../services/hnApi'\nimport {StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement} from '../styles/StoryStyles'\nimport {mapTime} from '../mappers/mapTime'\n\n\nexport const Story = ({storyId}) => {\n\n    const [story, setStory] = useState({});\n\n\n    useEffect(() => {\n        getStory(storyId).then(data => data && data.url && setStory(data));\n    // eslint-disable-next-line\n    },[]);\n    return story && story.url ? (\n\n        \n        <StoryWrapper data-testid=\"story\">\n        <StoryTitle>\n\n            <a href={story.url}> {story.title}</a> \n        </StoryTitle>\n\n\n        <StoryMeta>\n            <span> \n            <StoryMetaElement color=\"#adadad\">Url:  </StoryMetaElement> {' '} {story.url}\n            </span>\n            \n        </StoryMeta>\n\n        <StoryMeta>\n            <span>\n            <StoryMetaElement color=\"#adadad\">Posted:  </StoryMetaElement> {` `} \n            {mapTime(story.time)}\n             </span>\n            \n        </StoryMeta>\n        </StoryWrapper>\n        \n    ) : null ;\n}","export const mapTime = timestamp => {\n    // eslint-disable-next-line\n    const seconds = Math.floor((new Date - timestamp * 1000) / 1000);\n\n    let interval = Math.floor(seconds / 31536000);\n\n    if(interval > 1) {\n        return `${interval} years ago`;\n    }\n    interval = Math.floor(seconds / 2592000);\n\n    if(interval > 1) {\n        return `${interval} months ago`;\n    }\n    interval = Math.floor(seconds / 864400);\n\n    if(interval > 1) {\n        return `${interval} days ago`;\n    }\n    interval = Math.floor(seconds / 3600);\n\n    if(interval > 1) {\n        return `${interval} hours ago`;\n    }\n    interval = Math.floor(seconds / 60);\n    if(interval > 1) {\n        return `${interval} minutes ago`;\n    }\n    \n    return ` ${Math.floor(seconds)} seconds ago`\n\n}","import styled, { createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle `\n\n    html {\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box;\n    }\n    *, *:before, *:after {\n        -webkit-box-sizing: inherit;\n                box-sizing: inherit;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n        line-height: 1;\n        color: #2bc4c4;\n        background-color: #373838;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 16px;\n    }\n\n    ul {\n        margin: 0;\n        padding: 0;\n    }\n\n`\nexport const StoryContainerWrapper = styled.main `\n\n    max-width: 1140px;\n    padding: 20px 15;\n    margin: auto;\n\n`;","import { useState, useEffect } from \"react\";\nimport {STORY_INCREMENT, MAX_STORIES} from '../constants/index';\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n    const [loading, setLoading] = useState(false);\n    const [count, setCount] = useState(STORY_INCREMENT);\n\n    const handleScroll = debounce(() => {\n        \n        if(window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n            return false;\n        }\n        setLoading(true);\n\n\n    }, 500);\n\n    useEffect(() => {\n        if(!loading) return;\n\n        if(count + STORY_INCREMENT >= MAX_STORIES) {\n        setCount(MAX_STORIES);\n        } else {\n            setCount(count + STORY_INCREMENT);\n        }\n\n        setLoading(false);\n    // eslint-disable-next-line\n    }, [loading]);\n\n    \n    useEffect(() => {\n\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    // eslint-disable-next-line\n    }, []);\n\n   return{count};\n\n}","export const MAX_STORIES = 500;\nexport const STORY_INCREMENT = 30;","export const debounce = (func, wait, immediate, args) => {\n\n    let timeout;\n\n    return () => {\n        const context = this;\n        const callNow = immediate && !timeout;\n\n        const later = () => {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n\n        if(callNow) func.apply(context, args);\n    }\n}","import React, {useEffect, useState} from 'react';\nimport {getStoryIds} from '../services/hnApi';\nimport { Story } from '../components/story';\nimport { GlobalStyle, StoryContainerWrapper } from \"../styles/StoryContainerStyles\";\nimport {useInfiniteScroll} from '../hooks/useInfiniteScroll';\n\n\nexport const StoriesContainer = () => {\n\n    const [StoryIds, setStoryIds] = useState([]);\n    const { count } = useInfiniteScroll();\n  \n    useEffect(() => {\n      getStoryIds().then(ids => setStoryIds(ids));\n    }, [\n    ]);\n\n   \n  \n    return (\n    \n        <>\n    <GlobalStyle /> \n    <StoryContainerWrapper data-test-id=\"story-conatiner\"> \n    <h1>Hacker News</h1>\n    {StoryIds.slice(0, count).map(storyId => (\n        \n       \n\n            <Story key={storyId} storyId = {storyId} />\n            \n            ))}\n        \n        \n        \n    </StoryContainerWrapper>\n    \n  </>);\n  }","import React from 'react';\nimport {render} from 'react-dom';\nimport {App} from './App';\n// import * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n\n// serviceWorker.register();\n","import React from 'react';\nimport { StoriesContainer } from './containers/StoriesContainer';\n\n\nexport const App = () => <StoriesContainer></StoriesContainer>;"],"sourceRoot":""}